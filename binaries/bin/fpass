#!/usr/bin/env python3

from contextlib import contextmanager
import enum
import re
import os.path
import subprocess
import termios
import select
import sys
import argparse
import unicodedata
import json

NON_PRINTABLE_CATEGORY = {"Cc", "Cf", "Cs", "Co", "Cn"}

try:
    import fuzzywuzzy.process
    import fuzzywuzzy.fuzz
except ModuleNotFoundError:
    print("Can't find fuzzywuzzy, you first need to install it via " +
          "'pip install --user fuzzywuzzy' or other")
    sys.exit(-1)

PASS_DIR = os.path.expanduser("~/.password-store/")
BITWARDEN_SESSION_PATH = os.path.expanduser("~/.bitwarden_session")
HIST_FILE = os.path.expanduser("~/.fpass-history")
MAX_HISTORY_SIZE = 10
WORD_CHAR_SEP = " /" # char need to be escaped for if has any effect in bracket context regex


reg_pass_file =  re.compile("^" + PASS_DIR + "(.+)\.gpg$")
reg_ctrl_bcksp = re.compile(f"(^|[{WORD_CHAR_SEP}])[^{WORD_CHAR_SEP}]+$")

CURSOR_UP_ONE = '\x1b[1A'
CURSOR_DOWN_ONE = '\x1b[1B'
ERASE_LINE = '\x1b[2K'


class History:
    """Load and write into history file"""
    def __init__(self):
        debug("Initializing history", level=1)
        self.entry = -1
        self.history = []

        if HIST_FILE:
            try:
                with open(HIST_FILE, 'r') as f:
                    self.history = f.read().splitlines()
                    debug("History:", '-'*15, *enumerate(self.history), '-'*15, sep='\n', level=2)
            except FileNotFoundError:
                debug("File not found, will create it")
            except OSError:
                debug("Can't open history file", HIST_FILE)

        debug("Length history", len(self.history), level=1)

    def write(self):
        if HIST_FILE:
            try:
                with open(HIST_FILE, 'w') as f:
                    f.write('\n'.join(self.history[:MAX_HISTORY_SIZE]))
            except OSError:
                debug("Can't write history file")

    def entry_up(self):
        entry = min(self.entry + 1, len(self.history) - 1)
        changed = (entry != self.entry)
        self.entry = entry
        if changed: debug(f"History entry set to {self.entry}")
        return changed

    def entry_down(self):
        entry = max(self.entry - 1, -1)
        changed = (entry != self.entry)
        self.entry = entry
        if changed: debug(f"History entry set to {self.entry}")
        return changed

    def get_entry(self):
        if self.entry == -1:
            return ""
        try:
            out = self.history[self.entry]
        except IndexError:
            debug(f"History entry index ({self.entry}) out of range !")
            out = ""
        return out

    def add_entry(self, entry):
        # Remove old occurences of entry in history and put it at top
        indices = [i for i, x in enumerate(self.history) if x == entry]
        for indice in sorted(indices, reverse=True):
            del self.history[indice]

        self.history.insert(0, str(entry))


class ConsoleStatus(enum.IntEnum):
    NONE           = 0
    ENTRY_CHANGED  = 1
    HISTORY_UP     = 2
    HISTORY_DOWN   = 3
    REDISPLAY      = 4
    EXIT           = 5
    COMMIT         = 6 # When enter is hit
    NEXT_ENTRY     = 7
    PREVIOUS_ENTRY = 8

class ConsoleDisplay:
    def __init__(self):
        self.cursor_column = 0
        self.entry = ""
        self.out = ""
        self.index = 0

    def send(self, out, index):
        self.out = out
        self.index = index

    def set_entry(self, entry):
        self.entry = entry
        self.cursor_column = len(entry)

    def get_entry(self):
        return self.entry

    def update(self):
        self.display()
        try:
            with self.input_non_canonical_no_echo():
                for c in self.wait_one_char():
                    status = self.process_input(c)
                    if status:
                        yield status # self.out should be changed by fpass if needed

                        self.clean()
                        self.display()
        except KeyboardInterrupt:
            yield ConsoleStatus.EXIT
            return

    def move_cursor(self, row, column):
        if row > 0:
            self.write(f'\x1b[{row}B')
        if row < 0:
            self.write(f'\x1b[{-row}A')

        self.write(f'\x1b[G')
        if column > 0:
            self.write(f'\x1b[{column}C')

    def erase_line(self):
        self.write(ERASE_LINE)

    def flush(self):
        sys.stdout.flush()

    def display(self):
        format_in = "input: "

        self.write(f"\x1b[G{format_in}{self.entry}\noutput ({self.index}): {self.out}")

        self.move_cursor(-1, len(format_in) + self.cursor_column)
        sys.stdout.flush()

    def write(self, s):
        sys.stdout.write(s)

    def clean(self):
        self.erase_line()
        self.move_cursor(1, 0)
        self.erase_line()
        self.move_cursor(-1, 0)

        self.flush()

    def get_non_blocking_input(self):
        def isData():
            return select.select([sys.stdin], [], [], 0) == ([sys.stdin], [], [])

        if isData():
            return sys.stdin.read(1)

    def wait_one_char(self):
        while True:
            c = None
            while c is None:
                c = self.get_non_blocking_input()

            yield c

    @contextmanager
    def input_non_canonical_no_echo(self):
        """ /!\ Don't use inputs in the context manager
        Put input in non canonical mode, (input are available immediatly) and no echo,
            (as in passwords field in terminals)
        """

        old_settings = termios.tcgetattr(sys.stdin)
        new_settings = termios.tcgetattr(sys.stdin)
        new_settings[3] = new_settings[3] & ~(termios.ECHO | termios.ECHONL | termios.ICANON)
        try:
            termios.tcsetattr(sys.stdin, termios.TCSADRAIN, new_settings)

            yield

        finally:
            termios.tcsetattr(sys.stdin, termios.TCSADRAIN, old_settings)

    def end(self):
        self.move_cursor(1, 0)
        self.write('\n')

    def process_input(self, c):
        if c is None:
            pass

        debug("Input to process: " + hex(ord(c)), level=3)

        if c == '\n':
            return ConsoleStatus.COMMIT
        elif c == '\x02':
            return ConsoleStatus.PREVIOUS_ENTRY
        elif c == '\x06':
            return ConsoleStatus.NEXT_ENTRY
        elif c == '\x08': # Ctrl + backspace = kill word backward
            entry_front_tmp = self.entry[:self.cursor_column]
            entry_back_tmp = self.entry[self.cursor_column:]

            entry_front_tmp = reg_ctrl_bcksp.split(entry_front_tmp)[0]

            self.cursor_column = len(entry_front_tmp)
            self.entry = entry_front_tmp + entry_back_tmp

            return ConsoleStatus.ENTRY_CHANGED
        elif c == '\x01': # Ctrl + A -- Go to begining
            self.cursor_column = 0
            return ConsoleStatus.REDISPLAY

        elif c == '\x05': # Ctrl + E -- Go to end
            self.cursor_column = len(self.entry)
            return ConsoleStatus.REDISPLAY

        elif c == '\x7f': # backspace -- remove Char
            self.entry = self.entry[:-1]
            self.cursor_column = max(0, self.cursor_column - 1)
            return ConsoleStatus.ENTRY_CHANGED

        elif c == '\x15': # Ctrl + U -- Kill line
            self.cursor_column = 0
            self.entry = ''
            return ConsoleStatus.ENTRY_CHANGED

        elif c == '\x0b': # Ctrl + K -- Kill end of line
            self.entry = self.entry[:self.cursor_column]
            return ConsoleStatus.ENTRY_CHANGED

        elif c == '\x17': # Ctrl + W -- kill word
            last_space = max(0, self.entry[:self.cursor_column].rfind(' '))
            self.entry = self.entry[:last_space] \
                        + self.entry[self.cursor_column:]
            self.cursor_column = last_space
            return ConsoleStatus.ENTRY_CHANGED
        elif c == '\x1b':
            c = sys.stdin.read(1)
            if c == '[':
                c = sys.stdin.read(1)
                if c == 'A':
                    return ConsoleStatus.HISTORY_UP
                if c == 'B':
                    return ConsoleStatus.HISTORY_DOWN
                if c == 'C':
                    self.cursor_column = min(len(self.entry), self.cursor_column + 1)
                    return ConsoleStatus.REDISPLAY
                if c == 'D':
                    self.cursor_column = max(0, self.cursor_column - 1)
                    return ConsoleStatus.REDISPLAY
        elif unicodedata.category(c) in NON_PRINTABLE_CATEGORY: # Drop non printable characters
            return ConsoleStatus.NONE

        # Normal characters
        self.entry = self.entry[:self.cursor_column] + c + self.entry[self.cursor_column:]
        self.cursor_column += 1
        return ConsoleStatus.ENTRY_CHANGED


class Fpass:
    """Deals with datas and logic of fuzzy finding the correct pass"""
    def __init__(self, passwordManager):
        self.passwordManager = passwordManager
        self.pass_data = self.passwordManager.get_pass_data()
        self.history = History()
        self.display = ConsoleDisplay()
        self.index = 0

    def run(self):
        id_p = None
        def update_out():
            nonlocal id_p
            try:
                id_p = self.fuzzy_find(self.display.get_entry(), self.pass_data)
                out = self.pass_data[id_p]
            except LookupError:
                id_p = None
                out = ""
            self.display.send(out, self.index)

        for status in self.display.update():
            debug("Status: ", status, level=3)
            if status == ConsoleStatus.ENTRY_CHANGED:
                self.index = 0
                update_out()

            if status == ConsoleStatus.HISTORY_UP:
                self.index = 0
                if self.history.entry_up():
                    ent = self.pass_data.get(self.history.get_entry(), "")
                    self.display.set_entry(ent)
                    update_out()

            if status == ConsoleStatus.HISTORY_DOWN:
                self.index = 0
                if self.history.entry_down():
                    ent = self.pass_data.get(self.history.get_entry(), "")
                    self.display.set_entry(ent)
                    update_out()

            if status == ConsoleStatus.REDISPLAY:
                pass

            if status == ConsoleStatus.EXIT:
                self.display.end()
                return # No history write, no pass_call

            if status == ConsoleStatus.COMMIT:
                if id_p:
                    self.history.add_entry(id_p)
                    self.history.write()
                self.display.end()

                self.passwordManager.commit(id_p)
                return

            if status == ConsoleStatus.NEXT_ENTRY:
                self.index += 1
                update_out()
            if status == ConsoleStatus.PREVIOUS_ENTRY:
                self.index = max(0, self.index - 1)
                update_out()

    def fuzzy_find(self, entry, pass_data):
        entry = fuzzywuzzy.utils.full_process(entry)
        if not entry:
            raise LookupError

        outputs = fuzzywuzzy.process.extract(entry, pass_data, limit=None)

        self.index = min(self.index, len(outputs) - 1)
        return outputs[self.index][2]


class PasswordManager:
    def get_pass_data(self):
        """Should return a dict of the kind: {id: passwordName}"""
        raise NotImplementedError

    def commit(self, id_pass):
        """Should copy in clipboard password associated with id_pass"""
        raise NotImplementedError

class BitWarden(PasswordManager):
    def __init__(self):
        self.pass_data = None

    def bw_list(self):
        with open(BITWARDEN_SESSION_PATH) as f:
            s = f.read()
            return subprocess.check_output(["bw", "list", "items", "--session", s]).decode()

    def get_pass_data(self):
        try:
            out = self.bw_list()
        except (subprocess.CalledProcessError, FileNotFoundError):
            subprocess.run("bwu")
            out = self.bw_list()

        data = json.loads(out)

        self.pass_data = {i["id"]: i["login"]["password"] for i in data if "login" in i.keys() and i['type'] == 1}
        out = {i["id"]: f"{i['name']} | {i['login']['username']}" for i in data if "login" in i.keys() and i['type'] == 1}
        return out

    def commit(self, id_pass):
        if not id_pass:
            return

        p = subprocess.Popen(['xclip', '-selection', 'clipboard'],
                             stdin=subprocess.PIPE, close_fds=True)
        p.communicate(input=self.pass_data[id_pass].encode('utf-8'))


class Pass(PasswordManager):

    def get_pass_data(self):
        """Get list of all stored passwords in pass"""
        out = subprocess.check_output(["find", PASS_DIR, "-type", "f", "-name", "*.gpg"]).decode()

        cleaned_up = [reg_pass_file.search(l).groups()[0] for l in out.splitlines() if l]

        return {c: c for c in cleaned_up} # Path is unique

    def commit(self, id_pass):
        subprocess.call(["pass", id_pass, "-c"])


def main(passwordManager):
    fpass = Fpass(passwordManager)
    fpass.run()

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('-p', '--password-manager', action='store', default='bitwarden', choices=['bitwarden', "pass"],
                        help='choose password manager to use. Default is BitWarden.')
    parser.add_argument('-d', '--debug', action='count', default=0,
                        help="Set debug mode."
                        "The more this argument appear, the more debug output is verbose"
                        "Output should be redirected to a file. "
                        "The best is to create a fifo to get directly output.")

    args = parser.parse_args()
    if args.debug != 0:
        def debug(*_args, **kwargs):
            level = 0
            if 'level' in kwargs:
                level = kwargs.pop('level')

            if level <= args.debug:
                print(*_args, **kwargs, file=sys.stderr)
                sys.stderr.flush()
    else:
        def debug(*args, **kwargs):
            pass
    if args.password_manager == 'bitwarden': passwordManager = BitWarden()
    if args.password_manager == 'pass': passwordManager = Pass()
    main(passwordManager)

#!/usr/bin/python3
import argparse
import json
import pprint
import sys
import textwrap

import colors
import convertdata

verbose = 0

style_table_output = {
    "plain": print,
    "pprint": pprint.pprint,
    "json": lambda x: print(json.dumps(x))
}


def print_eval(x, style, expand_list, remove_falses):
    if hasattr(x, '__iter__') and not isinstance(x, str):
        x = list(x)

    if isinstance(x, list) and len(x) == 1:
        x = x[0]

    if isinstance(x, list) and expand_list:
        for a in x:
            print_eval(a, style, expand_list - 1, remove_falses)
    elif not x and remove_falses:
        pass
    else:
        try:
            style_table_output[style](x)
        except Exception as e:
            colors.print_err("Error while output", style,
                             fg=colors.fg.red)

            if verbose > 0:
                colors.print_err(e, fg=colors.fg.orange)
            sys.exit(-1)


def create_globals(modules):
    """Create globals which will be used the python instance and import external modules as needed"""
    glob = {}

    if modules:
        for m in modules.split(';'):
            m = m.strip()  # remove unwanted spaces and newlines
            try:
                mod = __import__(m, glob)
            except ModuleNotFoundError:
                colors.print_err("Can't find module", m, fg=colors.fg.red)
                sys.exit(-1)

            glob[m.split('.')[0]] = mod

    def frange(start, end, step=1):
        """Range-like, also for floats"""
        x = start
        while True:
            yield x
            x += step
            if x > end:
                break

    glob["frange"] = frange

    return glob


def execute_code(code, glob, loc, store_return_value=True):
    if verbose > 1:
        colors.print_err("Before execute code", fg=colors.fg.cyan)
        colors.print_err(f"Code: {code}", fg=colors.fg.cyan)
        colors.print_err(f"Locals: {pprint.pformat(loc)}",
                         fg=colors.fg.cyan)
    if verbose > 2:
        colors.print_err(f"Globals: {pprint.pformat(glob)}",
                         fg=colors.fg.cyan)

    try:
        ret = eval(code, glob, loc)
    except Exception as e:
        colors.print_err("Error while initialization part", fg=colors.fg.red)
        if verbose > 0:
            colors.print_err(f'{e} in "{code}"', fg=colors.fg.orange)
        sys.exit(-1)

    if store_return_value:
        loc['_'] = ret

    if verbose > 1:
        colors.print_err("After execute code", fg=colors.fg.cyan)
        colors.print_err(f"Locals: {pprint.pformat(loc)}",
                         fg=colors.fg.cyan)
        colors.print_err("------------------", fg=colors.fg.cyan)

    return ret


def execute_print(code, glob, loc, style, expand_list, remove_falses, do_print):
    for c in code:
        execute_code(c, glob, loc)
    if do_print:
        print_eval(loc["_"], style, expand_list, remove_falses)


def run_in_pipe(code, preprocess, converter, converter_options,
                glob, loc, style, expand_list, remove_falses, last_only):

    loc["lc"] = 0
    for line in sys.stdin.readlines():
        line = line.rstrip('\n')

        if preprocess:
            loc["i"] = line
            line = execute_code(preprocess, glob, loc, False)
        try:
            loc["i"] = convertdata.get_converter(converter,
                                                 converter_options)(line)
        except Exception as e:
            colors.print_err("Error while converting stdin to", converter,
                             fg=colors.fg.red)
            if verbose:
                colors.print_err(e, fg=colors.fg.orange)
            sys.exit(-1)

        execute_print(code, glob, loc,
                      style, expand_list, remove_falses, not last_only)

        loc["lc"] = loc["lc"] + 1

def main(code, preprocess, init,
         converter, converter_options,
         style, expand_list,
         modules, remove_falses, last_only):

    glob = create_globals(modules)
    loc = {}

    if init:
        execute_code(init, glob, loc)

    if not sys.stdin.isatty():
        run_in_pipe(code, preprocess, converter, converter_options,
                    glob, loc, style, expand_list, remove_falses, last_only)
    else:
        execute_print(code, glob, loc, style, expand_list, remove_falses, not last_only)

    if last_only:
        print_eval(loc["_"], style, expand_list, remove_falses)


if __name__ == "__main__":
    parser = argparse.ArgumentParser()

    parser.add_argument('code', nargs='*', help="The executed code.\
                        _ is last returned val, i is current val",
                        default=["i"])
    parser.add_argument('-p', '--preprocess', help="preprocess the input string \
                        with given code")
    parser.add_argument('-i', '--init', help="initialize the _ val \
                        with given code",
                        default='0')

    parser.add_argument("-m", "--modules",
                        help="coma-separated list of module to load",
                        dest='modules')

    parser.add_argument('-s', '--style-output',
                        choices=list(style_table_output.keys()),
                        dest='style',
                        help='set the output style')

    parser.add_argument("-l", "--last-only", action="store_true", default=False,
                              help="Print only last result if set")
    parser.add_argument("-r", "--remove-falses", action="store_true", default=False)
    parser.add_argument("-x", "--expand-list",
                              action='count',
                              default=0,
                              help="Expand list up to n times \
                                    (n = nbr of occurence on command\
                                    line of the arg)",
                              dest='expand_list')

    convertdata.configure_argparser(parser, default='string')

    parser.add_argument("-v", "--verbose", action="count", default=0)
    args = parser.parse_args()

    if args.style is None:
        args.style = "pprint" if sys.stdout.isatty() else "plain"

    verbose = args.verbose

    if verbose > 0:
        colors.print_err(textwrap.dedent(f"""\
                            Preprocess: {args.preprocess}
                            Code: {args.code}
                            Converter: {args.converter}
                            Converter options: {args.converter_options}
                            Style: {args.style}
                            Expand list: {args.expand_list}
                            Modules: {args.modules}
                            """),
                         fg=colors.fg.cyan)

    main(args.code,
         args.preprocess,
         args.init,
         args.converter,
         args.converter_options,
         args.style,
         args.expand_list,
         args.modules,
         args.remove_falses, args.last_only)

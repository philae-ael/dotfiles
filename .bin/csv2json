#!/usr/bin/python

import argparse
import csv
import io
import json
import sys
from collections.abc import Generator
from collections import Counter
from contextlib import contextmanager

import logging

logger = logging.getLogger(__name__)


def json_printer(gen: Generator):
    print("[")
    try:
        line = gen.__next__()
        print(json.dumps(line), end="")
    except StopIteration:
        pass

    for line in gen:
        print(",\n", json.dumps(line), end="")
    print("\n]")


def jsonl_printer(gen: Generator):
    for line in gen:
        print(json.dumps(line))


valid_separators = {",", ";", "\t", "|"}


def main(f, format, separator):
    # Idk if this works well
    if separator == "detect":
        first_line = f.readline()
        counter = Counter(c for c in first_line if c in valid_separators)
        separator = counter.most_common(1)[0][0]
        logger.info(f"Detected separator: {separator}")
        f.seek(0)

    match format:
        case "json":
            printer = json_printer
        case "jsonl":
            printer = jsonl_printer
        case _:
            raise Exception("Incorrect format")

    try:
        gen = (dict(r) for r in csv.DictReader(f, delimiter=separator))
        printer(gen)
    except (BrokenPipeError, KeyboardInterrupt):
        return


@contextmanager
def inputfile(filename, mode, encoding):
    if filename == "-":
        yield io.TextIOWrapper(sys.stdin.buffer, encoding=encoding)
    else:
        with open(filename, mode, encoding=encoding) as input:
            yield input


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("--format", default="jsonl", choices=["json", "jsonl"])
    parser.add_argument("--encoding", default="utf-8")
    parser.add_argument(
        "-s",
        "--separator",
        default="detect",
        choices=list(valid_separators) + ["detect"],
    )
    parser.add_argument(
        "-v", "--verbose", action="store_true", help="Enable verbose output"
    )
    parser.add_argument("input", nargs="?", default="-")
    args = parser.parse_args()

    if args.verbose:
        logging.basicConfig(level=logging.INFO)
    else:
        logging.basicConfig(level=logging.WARNING)

    with inputfile(args.input, "r", args.encoding) as input:
        main(input, args.format, args.separator)

global !p
texMathZones = ['texMathZone'+x for x in ['A', 'AS', 'B', 'BS', 'C',
'CS', 'D', 'DS', 'E', 'ES', 'F', 'FS', 'G', 'GS', 'H', 'HS', 'I', 'IS',
'J', 'JS', 'K', 'KS', 'L', 'LS', 'DS', 'V', 'W', 'X', 'Y', 'Z']]

texIgnoreMathZones = ['texMathText']

texMathZoneIds = vim.eval('map('+str(texMathZones)+", 'hlID(v:val)')")
texIgnoreMathZoneIds = vim.eval('map('+str(texIgnoreMathZones)+", 'hlID(v:val)')")

ignore = texIgnoreMathZoneIds[0]

def math():
    synstackids = vim.eval("synstack(line('.'), col('.') - (col('.')>=2 ? 1 : 0))")
    try:
        first = next(
            i for i in reversed(synstackids)
            if i in texIgnoreMathZoneIds or i in texMathZoneIds
        )
        return first != ignore
    except StopIteration:
        return False


def suc(s):
    try:
        p = ''
    except:
        return False
    return re.match(s, p) is not None

def pre(s):
    try:
        p = snip.buffer[snip.line][snip.column + 1 :]
    except:
        return False
    return re.match(s, p) is not None

def mathw():
    return math() and not suc("\\\\")
endglobal

snippet beg "\begin{} / \end{}" bA
\begin{$1}
    $0
\end{$1}
endsnippet

snippet end "\end{}" b
\end{$1}
$0
endsnippet

context "mathw()"
snippet sr "^2" iA
^2
endsnippet

context "mathw()"
snippet '([a-zA-Z])([-0-9])' "x2" wrA
`!p snip.rv = match.group(1)
`^`!p snip.rv = match.group(2)`
endsnippet

context "mathw() and pre(']')"
snippet [ "brackets []" i
\left[$1\right
endsnippet
    
context "mathw() and not pre(']')"
snippet [ "brackets []" i
\left[$1\right]
endsnippet

context "mathw()"
snippet ] "brackets ][" i
\left]$1\right[
endsnippet

context "mathw() and pre('\)')"
snippet ( "brackets ()" i 
\left($1\right
endsnippet
    
context "mathw() and not pre('\)')"
snippet ( "brackets ()" i 
\left($1\right)
endsnippet

context "mathw()"
snippet | "abs | |" i 
\left|$1\right|
endsnippet

#####
# Function and math utils 
####

context "mathw()"
snippet pi "pi" wA
\pi
endsnippet
 
context "mathw()"
snippet lim "limite" w
\lim_{${1:n} \to ${2:\infty}} 
endsnippet
    
context "mathw()"
snippet cos "cosinus" wA
\cos
endsnippet

context "mathw()"
snippet sin "sinus" wA
\sin
endsnippet

context "mathw()"
snippet tan "tangente" wA
\tan
endsnippet

context "mathw()"
snippet cotan "cotangente" wA
\cotan
endsnippet


context "mathw()"
snippet ln "log népérien" wA
\ln
endsnippet


context "mathw()"
snippet series "series" w
\sum_{${1:n \ge 0}} 
endsnippet

context "mathw()"
snippet ssum "series sum" w
\sum_{${1:n=0}}^{${2:+\infty}}
endsnippet

context "mathw()"
snippet sum "sum" w
\sum_{${1:k=0}}^{${2:n}}
endsnippet

context "mathw()"
snippet txt "text" wA
\text{$1}$0
endsnippet

context "mathw()"
snippet mto "\mapsto" wA
\mapsto $0
endsnippet

####
# Math fractions
####

snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet


priority 9
context "mathw()"
snippet / "Fraction" iA
\\frac{${VISUAL}}{$1}$0
endsnippet

priority 10
context "mathw()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "Fraction" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

priority 11
context "mathw()"
snippet '^.*\)/' "() Fraction" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0 : break;
	i -= 1
snip.rv = stripped[0 :i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

####
# Math sub/super script
####

context "math()"
snippet '([A-Za-z0-9)}])_([^ {][^ }|():,.\^])' "auto subscript" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`$1}$0
endsnippet

priority 10
context "math()"
snippet '([A-Za-z0-9)}])\^([^ {][^ }|():,.\^])' "auto superscript" wrA
`!p snip.rv = match.group(1)`^{`!p snip.rv = match.group(2)`$1}$0
endsnippet

priority 11
context "math()"
snippet '\\mathbb R(\+|-)' "bb R+" rA
\\mathbb R^`!p snip.rv = match.group(1)``!p
if t[1] and t[1][0] == '*':
    snip.rv = '_'
else:
    snip.rv = ''
`$1
endsnippet

####
# Math environments
####

snippet $ "inline math" w
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
    snip.rv = ' '
else:
    snip.rv = ''
`$2
endsnippet

snippet dm "display math" wA
\\[
$1.
\\]
$0
endsnippet

context "mathw()"
snippet si "SI units" w
\SI{$1}{$2}$0
endsnippet

context "mathw()"
snippet sqrt "Square root" wA
\sqrt$0
endsnippet

context "mathw()"
snippet bb "mathbb" wA
\mathbb $0
endsnippet
    
context "mathw()"
snippet rm "mathbb" wA
\mathrm $0
endsnippet


context "mathw()"
snippet cal "mathcal" wA
\mathcal $0
endsnippet
    
snippet eeq "Equation" b
\begin{equation}
    $1
\end{equation}
$0
endsnippet
snippet eq "Equation*" b
\begin{equation*}
    $1
\end{equation*}
$0
endsnippet

snippet eq* "Equation" b
\begin{equation*}
    $1
\end{equation*}
$0
endsnippet

snippet proof "Proof" b
\begin{proof}
    $1
\end{proof}
$0
endsnippet


####
# Text environments
####

snippet fig "Figures" b
\begin{figure}
\centering
    $2
\caption{$1}
\label{fig:`!p
if t[1]:
    snip.rv = t[1].replace(" ", "_")
else:
   snip.rv = ''
`}
\end{figure}
$0
endsnippet 

snippet tbf "Text bold font" wA
\textbf{$1} $0
endsnippet

snippet tit "\textit" wA
\textit{$1} $0
endsnippet

snippet emp "\temph" wA
\emph{$1} $0
endsnippet

snippet ssi "si et seulement si" wA
si et seulement si$0
endsnippet

snippet enum "enumerate" 
\begin{enumerate}
    \item $1
\end{enumerate}
$0
endsnippet
